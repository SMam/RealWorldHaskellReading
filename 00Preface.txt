Have We Got a Deal for You!

Hakellは深みのある言語; 学ぶことで大いに酬われるだろう。何故かを3点にしぼって説明しよう。
第一に「新規性」:プログラミングについて、ある異なった価値ある視点から考えるようになる
次に「力」:どのようにソフトウェアを短く、速く、安全に作るかお見せしよう
最後に多くの「楽しさ」:実際の問題を解決するために美しいプログラミング技術を適用する楽しみ

新規性
Haskellは恐らくあなたがこれまで使ってきたいかなる言語とも極めて異なっている。プログラマーの心の道具箱にある普段の概念と比べると、関数型プログラミングはソフトウェアに対する根本的に異なった考え方を提供する
Haskellではデータを改変するコードを重視しない。その代わり、入力に不変(immutable)の値を取り、出力として新しい値を作る関数に注目する。同じ入力に対してこれらの関数は常に同じ結果を返す。これが関数型プログラミングの背後にある核となる考えだ。
データを変更しないのと同時に、われわれのHaskellの関数は普通は外の世界には語りかけない。これらの関数を「pure」なものと呼ぶ。我々はpureなコードと、プログラムの中でファイルの読み書き、ネットワーク通信、またはロボットの腕を動かす部分を強く区別する。このことでプログラムを構成し、推論し、テストすることが容易となる。
基本的と思える考え方で捨てられたものもある、例えば組み込みの"for"ループなどだ。それ以外の、もっと柔軟な、反復するタスクを実行する方法があるのだ。
表現を評価する方法でさえHaskellでは異なっている。全ての計算は、本当に結果が必要となるまで延期する--Haskellは「怠け者」言語だ。遅延は単に処理順の問題ではなく、どのようにプログラムを書くかに大いに影響する。

力
本書を通して、Haskellのこれまでの言語の機能の置き換えがいかに強力で柔軟でコードの信頼性につながるかをお見せする。Haskellにはすばらしいソフトウェアの作り方の最先端のアイデアを積極的に詰め込んである。
pureなコードは外の世界と関係せず、またそれが扱うデータは決して変更されないので、一部のコードが別に使われるデータを陰で壊すような不愉快な驚きの類はとても稀だ。pureな関数を使うどのような局面であれ、関数は一貫して振る舞うだろう。
pureなコードは外の世界とか変わるコードよりもテストしやすい。ある関数が明示的な入力にのみ反応するなら、その振る舞いが常に真であるべきという性質について示すのは容易だ。こういった属性が大量のランダムな入力に対して保たれていることは自動的にテストでき、テストがパスしたなら先へ進める。ファイルやネットワークや外部のハードウェアとの連携を行うコードをテストするには、未だに伝統的なテスト技術を用いている。このようなpureでないコードは伝統的な言語よりもはるかに少ないので、われわれのソフトウェアは堅固であるとより自信を持てる。
遅延評価には驚くべき効果がいくつかある。ソートされていないリストから最小でkの値の要素を見つけたいとしよう。伝統的言語では、明白な解法はリストをソートして、最初のkの要素をとるだろう。しかしこれは不経済だ。効率的にするために、代わりに1回のパスでこれらの値をとる特別な関数を書くだろうが、ちょっと複雑な記録法を使わなければならないだろう。Haskellでは「ならべて-取る」(sort-then-take)アプローチが実際によく機能する:そのリストは最小kの要素を見つけるのに必要なだけしかソートされないことを遅延が保証する。
さらに良いことに、我々の効率的なHaskellコードは小さく、標準ライブラリ関数を用いる:
<pre>
-- file: ch00/KMinima.hs
-- lines begining with "--" are comments.

minima k xs = take k (sort xs)
</pre>

i遅延評価が重要と直感できるようになるには時間がかかるが、それを利用すれば、結果コードはきれいに、簡潔に、効率的になることが多い。
先の例が示すように、Haskellの力の重要な局面は書かれるコードのコンパクトさにある。一般的な伝統的言語で行うことと比べて、Haskellでの開発ではより少なく、したがってより短い時間でコードを書き、バグも少ないことが多い。
